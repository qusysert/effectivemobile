// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Ivan Demchuk",
            "email": "is.demchuk@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/addUser": {
            "post": {
                "description": "add new user with name, surname and patronymic",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Add user",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.AddUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.AddUserResponse"
                        }
                    }
                }
            }
        },
        "/deleteUser": {
            "delete": {
                "description": "Delete a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.emptyResponse"
                        }
                    }
                }
            }
        },
        "/getUser": {
            "get": {
                "description": "Get a list of users based on the provided filters and pagination options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name contains",
                        "name": "name_like",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum age",
                        "name": "age_from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum age",
                        "name": "age_to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Gender",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Nation",
                        "name": "nation",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page_num",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.GetUserResponse"
                        }
                    }
                }
            }
        },
        "/updateUser": {
            "post": {
                "description": "update user by passing new values",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.emptyResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.AddUserRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Peter"
                },
                "patronymic": {
                    "type": "string",
                    "example": "Ivanovich"
                },
                "surname": {
                    "type": "string",
                    "example": "Dibin"
                }
            }
        },
        "handler.AddUserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "handler.GetUserResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.UserInfo"
                    }
                }
            }
        },
        "handler.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 2
                },
                "name": {
                    "type": "string",
                    "example": "Bill"
                },
                "patronymic": {
                    "type": "string",
                    "example": ""
                },
                "surname": {
                    "type": "string",
                    "example": "McDonald Jr."
                }
            }
        },
        "handler.emptyResponse": {
            "type": "object"
        },
        "model.UserInfo": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 68
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Peter"
                },
                "nation": {
                    "type": "string",
                    "example": "RU"
                },
                "patronymic": {
                    "type": "string",
                    "example": ""
                },
                "surname": {
                    "type": "string",
                    "example": "Ivanovich"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Backend Trainee Assignment 2023",
	Description:      "Swagger documentation fo Backend Trainee Assignment 2023 service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
